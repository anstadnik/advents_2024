<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="3312"><g><title>dyld`start (1 samples, 0.03%)</title><rect x="0.0000%" y="405" width="0.0302%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>d21-846826bfeb2f96d8`main (1 samples, 0.03%)</title><rect x="0.0000%" y="389" width="0.0302%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>d21-846826bfeb2f96d8`std::rt::lang_start_internal (1 samples, 0.03%)</title><rect x="0.0000%" y="373" width="0.0302%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`pthread_get_stacksize_np (1 samples, 0.03%)</title><rect x="0.0000%" y="357" width="0.0302%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.48%)</title><rect x="0.0302%" y="261" width="0.4831%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="16"/><text x="0.2802%" y="271.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 0.57%)</title><rect x="0.8152%" y="245" width="0.5737%" height="15" fill="rgb(232,128,0)" fg:x="27" fg:w="19"/><text x="1.0652%" y="255.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.27%)</title><rect x="2.8684%" y="229" width="0.2717%" height="15" fill="rgb(207,160,47)" fg:x="95" fg:w="9"/><text x="3.1184%" y="239.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (78 samples, 2.36%)</title><rect x="3.1401%" y="229" width="2.3551%" height="15" fill="rgb(228,23,34)" fg:x="104" fg:w="78"/><text x="3.3901%" y="239.50">d..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (33 samples, 1.00%)</title><rect x="4.4988%" y="213" width="0.9964%" height="15" fill="rgb(218,30,26)" fg:x="149" fg:w="33"/><text x="4.7488%" y="223.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.12%)</title><rect x="7.6087%" y="213" width="0.1208%" height="15" fill="rgb(220,122,19)" fg:x="252" fg:w="4"/><text x="7.8587%" y="223.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (31 samples, 0.94%)</title><rect x="7.7295%" y="213" width="0.9360%" height="15" fill="rgb(250,228,42)" fg:x="256" fg:w="31"/><text x="7.9795%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (13 samples, 0.39%)</title><rect x="8.2729%" y="197" width="0.3925%" height="15" fill="rgb(240,193,28)" fg:x="274" fg:w="13"/><text x="8.5229%" y="207.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="9.2391%" y="197" width="0.0302%" height="15" fill="rgb(216,20,37)" fg:x="306" fg:w="1"/><text x="9.4891%" y="207.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 0.51%)</title><rect x="9.2693%" y="197" width="0.5133%" height="15" fill="rgb(206,188,39)" fg:x="307" fg:w="17"/><text x="9.5193%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (11 samples, 0.33%)</title><rect x="9.4505%" y="181" width="0.3321%" height="15" fill="rgb(217,207,13)" fg:x="313" fg:w="11"/><text x="9.7005%" y="191.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.21%)</title><rect x="10.1147%" y="181" width="0.2114%" height="15" fill="rgb(231,73,38)" fg:x="335" fg:w="7"/><text x="10.3647%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (4 samples, 0.12%)</title><rect x="10.2053%" y="165" width="0.1208%" height="15" fill="rgb(225,20,46)" fg:x="338" fg:w="4"/><text x="10.4553%" y="175.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.09%)</title><rect x="10.4771%" y="165" width="0.0906%" height="15" fill="rgb(210,31,41)" fg:x="347" fg:w="3"/><text x="10.7271%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.09%)</title><rect x="10.4771%" y="149" width="0.0906%" height="15" fill="rgb(221,200,47)" fg:x="347" fg:w="3"/><text x="10.7271%" y="159.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="10.5676%" y="149" width="0.0302%" height="15" fill="rgb(226,26,5)" fg:x="350" fg:w="1"/><text x="10.8176%" y="159.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="10.6582%" y="101" width="0.0302%" height="15" fill="rgb(249,33,26)" fg:x="353" fg:w="1"/><text x="10.9082%" y="111.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="10.6582%" y="85" width="0.0302%" height="15" fill="rgb(235,183,28)" fg:x="353" fg:w="1"/><text x="10.9082%" y="95.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="10.6582%" y="69" width="0.0302%" height="15" fill="rgb(221,5,38)" fg:x="353" fg:w="1"/><text x="10.9082%" y="79.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="10.6582%" y="53" width="0.0302%" height="15" fill="rgb(247,18,42)" fg:x="353" fg:w="1"/><text x="10.9082%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="10.6582%" y="37" width="0.0302%" height="15" fill="rgb(241,131,45)" fg:x="353" fg:w="1"/><text x="10.9082%" y="47.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="10.6582%" y="117" width="0.0604%" height="15" fill="rgb(249,31,29)" fg:x="353" fg:w="2"/><text x="10.9082%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="10.6884%" y="101" width="0.0302%" height="15" fill="rgb(225,111,53)" fg:x="354" fg:w="1"/><text x="10.9384%" y="111.50"></text></g><g><title>d21-846826bfeb2f96d8`d21::pad::KeyPad::gen_moves (2 samples, 0.06%)</title><rect x="10.7186%" y="117" width="0.0604%" height="15" fill="rgb(238,160,17)" fg:x="355" fg:w="2"/><text x="10.9686%" y="127.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.15%)</title><rect x="10.6582%" y="133" width="0.1510%" height="15" fill="rgb(214,148,48)" fg:x="353" fg:w="5"/><text x="10.9082%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.03%)</title><rect x="10.7790%" y="117" width="0.0302%" height="15" fill="rgb(232,36,49)" fg:x="357" fg:w="1"/><text x="11.0290%" y="127.50"></text></g><g><title>d21-846826bfeb2f96d8`d21::pad::KeyPad::gen_moves (3 samples, 0.09%)</title><rect x="10.8092%" y="133" width="0.0906%" height="15" fill="rgb(209,103,24)" fg:x="358" fg:w="3"/><text x="11.0592%" y="143.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="10.8696%" y="117" width="0.0302%" height="15" fill="rgb(229,88,8)" fg:x="360" fg:w="1"/><text x="11.1196%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.03%)</title><rect x="10.8696%" y="101" width="0.0302%" height="15" fill="rgb(213,181,19)" fg:x="360" fg:w="1"/><text x="11.1196%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="10.8998%" y="133" width="0.0302%" height="15" fill="rgb(254,191,54)" fg:x="361" fg:w="1"/><text x="11.1498%" y="143.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.39%)</title><rect x="10.5978%" y="149" width="0.3925%" height="15" fill="rgb(241,83,37)" fg:x="351" fg:w="13"/><text x="10.8478%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.06%)</title><rect x="10.9300%" y="133" width="0.0604%" height="15" fill="rgb(233,36,39)" fg:x="362" fg:w="2"/><text x="11.1800%" y="143.50"></text></g><g><title>d21-846826bfeb2f96d8`core::hash::Hash::hash_slice (1 samples, 0.03%)</title><rect x="10.9903%" y="149" width="0.0302%" height="15" fill="rgb(226,3,54)" fg:x="364" fg:w="1"/><text x="11.2403%" y="159.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.06%)</title><rect x="11.2319%" y="133" width="0.0604%" height="15" fill="rgb(245,192,40)" fg:x="372" fg:w="2"/><text x="11.4819%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.06%)</title><rect x="11.2319%" y="117" width="0.0604%" height="15" fill="rgb(238,167,29)" fg:x="372" fg:w="2"/><text x="11.4819%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="11.2923%" y="133" width="0.0604%" height="15" fill="rgb(232,182,51)" fg:x="374" fg:w="2"/><text x="11.5423%" y="143.50"></text></g><g><title>d21-846826bfeb2f96d8`d21::pad::KeyPad::gen_moves (12 samples, 0.36%)</title><rect x="11.0205%" y="149" width="0.3623%" height="15" fill="rgb(231,60,39)" fg:x="365" fg:w="12"/><text x="11.2705%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="11.3527%" y="133" width="0.0302%" height="15" fill="rgb(208,69,12)" fg:x="376" fg:w="1"/><text x="11.6027%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="11.3829%" y="149" width="0.0302%" height="15" fill="rgb(235,93,37)" fg:x="377" fg:w="1"/><text x="11.6329%" y="159.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 1.03%)</title><rect x="10.5676%" y="165" width="1.0266%" height="15" fill="rgb(213,116,39)" fg:x="350" fg:w="34"/><text x="10.8176%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (6 samples, 0.18%)</title><rect x="11.4130%" y="149" width="0.1812%" height="15" fill="rgb(222,207,29)" fg:x="378" fg:w="6"/><text x="11.6630%" y="159.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="11.5942%" y="165" width="0.0302%" height="15" fill="rgb(206,96,30)" fg:x="384" fg:w="1"/><text x="11.8442%" y="175.50"></text></g><g><title>d21-846826bfeb2f96d8`core::hash::Hash::hash_slice (1 samples, 0.03%)</title><rect x="11.6244%" y="165" width="0.0302%" height="15" fill="rgb(218,138,4)" fg:x="385" fg:w="1"/><text x="11.8744%" y="175.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.06%)</title><rect x="12.3792%" y="149" width="0.0604%" height="15" fill="rgb(250,191,14)" fg:x="410" fg:w="2"/><text x="12.6292%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.03%)</title><rect x="12.4094%" y="133" width="0.0302%" height="15" fill="rgb(239,60,40)" fg:x="411" fg:w="1"/><text x="12.6594%" y="143.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="12.4396%" y="149" width="0.0302%" height="15" fill="rgb(206,27,48)" fg:x="412" fg:w="1"/><text x="12.6896%" y="159.50"></text></g><g><title>d21-846826bfeb2f96d8`__rdl_alloc (1 samples, 0.03%)</title><rect x="12.4698%" y="149" width="0.0302%" height="15" fill="rgb(225,35,8)" fg:x="413" fg:w="1"/><text x="12.7198%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="12.5000%" y="149" width="0.0302%" height="15" fill="rgb(250,213,24)" fg:x="414" fg:w="1"/><text x="12.7500%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.15%)</title><rect x="12.5302%" y="149" width="0.1510%" height="15" fill="rgb(247,123,22)" fg:x="415" fg:w="5"/><text x="12.7802%" y="159.50"></text></g><g><title>d21-846826bfeb2f96d8`d21::pad::KeyPad::gen_moves (35 samples, 1.06%)</title><rect x="11.6546%" y="165" width="1.0568%" height="15" fill="rgb(231,138,38)" fg:x="386" fg:w="35"/><text x="11.9046%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="12.6812%" y="149" width="0.0302%" height="15" fill="rgb(231,145,46)" fg:x="420" fg:w="1"/><text x="12.9312%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="12.7114%" y="165" width="0.0302%" height="15" fill="rgb(251,118,11)" fg:x="421" fg:w="1"/><text x="12.9614%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.15%)</title><rect x="12.7415%" y="165" width="0.1510%" height="15" fill="rgb(217,147,25)" fg:x="422" fg:w="5"/><text x="12.9915%" y="175.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 2.81%)</title><rect x="10.3261%" y="181" width="2.8080%" height="15" fill="rgb(247,81,37)" fg:x="342" fg:w="93"/><text x="10.5761%" y="191.50">d2..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (8 samples, 0.24%)</title><rect x="12.8925%" y="165" width="0.2415%" height="15" fill="rgb(209,12,38)" fg:x="427" fg:w="8"/><text x="13.1425%" y="175.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$memcmp (5 samples, 0.15%)</title><rect x="13.1341%" y="181" width="0.1510%" height="15" fill="rgb(227,1,9)" fg:x="435" fg:w="5"/><text x="13.3841%" y="191.50"></text></g><g><title>d21-846826bfeb2f96d8`__rdl_alloc (1 samples, 0.03%)</title><rect x="13.2850%" y="181" width="0.0302%" height="15" fill="rgb(248,47,43)" fg:x="440" fg:w="1"/><text x="13.5350%" y="191.50"></text></g><g><title>d21-846826bfeb2f96d8`core::hash::Hash::hash_slice (5 samples, 0.15%)</title><rect x="13.3152%" y="181" width="0.1510%" height="15" fill="rgb(221,10,30)" fg:x="441" fg:w="5"/><text x="13.5652%" y="191.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.21%)</title><rect x="14.5229%" y="165" width="0.2114%" height="15" fill="rgb(210,229,1)" fg:x="481" fg:w="7"/><text x="14.7729%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (5 samples, 0.15%)</title><rect x="14.5833%" y="149" width="0.1510%" height="15" fill="rgb(222,148,37)" fg:x="483" fg:w="5"/><text x="14.8333%" y="159.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$memcpy (1 samples, 0.03%)</title><rect x="14.7343%" y="165" width="0.0302%" height="15" fill="rgb(234,67,33)" fg:x="488" fg:w="1"/><text x="14.9843%" y="175.50"></text></g><g><title>d21-846826bfeb2f96d8`__rdl_alloc (1 samples, 0.03%)</title><rect x="14.7645%" y="165" width="0.0302%" height="15" fill="rgb(247,98,35)" fg:x="489" fg:w="1"/><text x="15.0145%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.15%)</title><rect x="14.7947%" y="165" width="0.1510%" height="15" fill="rgb(247,138,52)" fg:x="490" fg:w="5"/><text x="15.0447%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.15%)</title><rect x="14.9457%" y="165" width="0.1510%" height="15" fill="rgb(213,79,30)" fg:x="495" fg:w="5"/><text x="15.1957%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.03%)</title><rect x="15.0966%" y="165" width="0.0302%" height="15" fill="rgb(246,177,23)" fg:x="500" fg:w="1"/><text x="15.3466%" y="175.50"></text></g><g><title>d21-846826bfeb2f96d8`d21::pad::KeyPad::gen_moves (59 samples, 1.78%)</title><rect x="13.4662%" y="181" width="1.7814%" height="15" fill="rgb(230,62,27)" fg:x="446" fg:w="59"/><text x="13.7162%" y="191.50">d..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (4 samples, 0.12%)</title><rect x="15.1268%" y="165" width="0.1208%" height="15" fill="rgb(216,154,8)" fg:x="501" fg:w="4"/><text x="15.3768%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.06%)</title><rect x="15.2476%" y="181" width="0.0604%" height="15" fill="rgb(244,35,45)" fg:x="505" fg:w="2"/><text x="15.4976%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="15.3080%" y="181" width="0.0604%" height="15" fill="rgb(251,115,12)" fg:x="507" fg:w="2"/><text x="15.5580%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 0.30%)</title><rect x="15.3684%" y="181" width="0.3019%" height="15" fill="rgb(240,54,50)" fg:x="509" fg:w="10"/><text x="15.6184%" y="191.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (218 samples, 6.58%)</title><rect x="9.7826%" y="197" width="6.5821%" height="15" fill="rgb(233,84,52)" fg:x="324" fg:w="218"/><text x="10.0326%" y="207.50">d21-84682..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (23 samples, 0.69%)</title><rect x="15.6703%" y="181" width="0.6944%" height="15" fill="rgb(207,117,47)" fg:x="519" fg:w="23"/><text x="15.9203%" y="191.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="16.3647%" y="197" width="0.0302%" height="15" fill="rgb(249,43,39)" fg:x="542" fg:w="1"/><text x="16.6147%" y="207.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$memcmp (10 samples, 0.30%)</title><rect x="16.3949%" y="197" width="0.3019%" height="15" fill="rgb(209,38,44)" fg:x="543" fg:w="10"/><text x="16.6449%" y="207.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="16.6969%" y="197" width="0.0302%" height="15" fill="rgb(236,212,23)" fg:x="553" fg:w="1"/><text x="16.9469%" y="207.50"></text></g><g><title>d21-846826bfeb2f96d8`__rdl_alloc (2 samples, 0.06%)</title><rect x="16.7271%" y="197" width="0.0604%" height="15" fill="rgb(242,79,21)" fg:x="554" fg:w="2"/><text x="16.9771%" y="207.50"></text></g><g><title>d21-846826bfeb2f96d8`core::hash::Hash::hash_slice (24 samples, 0.72%)</title><rect x="16.7874%" y="197" width="0.7246%" height="15" fill="rgb(211,96,35)" fg:x="556" fg:w="24"/><text x="17.0374%" y="207.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 0.33%)</title><rect x="20.5616%" y="181" width="0.3321%" height="15" fill="rgb(253,215,40)" fg:x="681" fg:w="11"/><text x="20.8116%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (9 samples, 0.27%)</title><rect x="20.6220%" y="165" width="0.2717%" height="15" fill="rgb(211,81,21)" fg:x="683" fg:w="9"/><text x="20.8720%" y="175.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$malloc (2 samples, 0.06%)</title><rect x="20.8937%" y="181" width="0.0604%" height="15" fill="rgb(208,190,38)" fg:x="692" fg:w="2"/><text x="21.1437%" y="191.50"></text></g><g><title>d21-846826bfeb2f96d8`__rdl_alloc (2 samples, 0.06%)</title><rect x="20.9541%" y="181" width="0.0604%" height="15" fill="rgb(235,213,38)" fg:x="694" fg:w="2"/><text x="21.2041%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.54%)</title><rect x="21.0145%" y="181" width="0.5435%" height="15" fill="rgb(237,122,38)" fg:x="696" fg:w="18"/><text x="21.2645%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (28 samples, 0.85%)</title><rect x="21.5580%" y="181" width="0.8454%" height="15" fill="rgb(244,218,35)" fg:x="714" fg:w="28"/><text x="21.8080%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (5 samples, 0.15%)</title><rect x="22.4034%" y="181" width="0.1510%" height="15" fill="rgb(240,68,47)" fg:x="742" fg:w="5"/><text x="22.6534%" y="191.50"></text></g><g><title>d21-846826bfeb2f96d8`d21::pad::KeyPad::gen_moves (171 samples, 5.16%)</title><rect x="17.5121%" y="197" width="5.1630%" height="15" fill="rgb(210,16,53)" fg:x="580" fg:w="171"/><text x="17.7621%" y="207.50">d21-84..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (4 samples, 0.12%)</title><rect x="22.5543%" y="181" width="0.1208%" height="15" fill="rgb(235,124,12)" fg:x="747" fg:w="4"/><text x="22.8043%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.12%)</title><rect x="22.6751%" y="197" width="0.1208%" height="15" fill="rgb(224,169,11)" fg:x="751" fg:w="4"/><text x="22.9251%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.09%)</title><rect x="22.7959%" y="197" width="0.0906%" height="15" fill="rgb(250,166,2)" fg:x="755" fg:w="3"/><text x="23.0459%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (40 samples, 1.21%)</title><rect x="22.8865%" y="197" width="1.2077%" height="15" fill="rgb(242,216,29)" fg:x="758" fg:w="40"/><text x="23.1365%" y="207.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (548 samples, 16.55%)</title><rect x="8.6655%" y="213" width="16.5459%" height="15" fill="rgb(230,116,27)" fg:x="287" fg:w="548"/><text x="8.9155%" y="223.50">d21-846826bfeb2f96d8`&lt;core..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (37 samples, 1.12%)</title><rect x="24.0942%" y="197" width="1.1171%" height="15" fill="rgb(228,99,48)" fg:x="798" fg:w="37"/><text x="24.3442%" y="207.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$free (2 samples, 0.06%)</title><rect x="25.2114%" y="213" width="0.0604%" height="15" fill="rgb(253,11,6)" fg:x="835" fg:w="2"/><text x="25.4614%" y="223.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$malloc (8 samples, 0.24%)</title><rect x="25.2717%" y="213" width="0.2415%" height="15" fill="rgb(247,143,39)" fg:x="837" fg:w="8"/><text x="25.5217%" y="223.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$memcmp (15 samples, 0.45%)</title><rect x="25.5133%" y="213" width="0.4529%" height="15" fill="rgb(236,97,10)" fg:x="845" fg:w="15"/><text x="25.7633%" y="223.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$pthread_mutex_lock (1 samples, 0.03%)</title><rect x="25.9662%" y="213" width="0.0302%" height="15" fill="rgb(233,208,19)" fg:x="860" fg:w="1"/><text x="26.2162%" y="223.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="25.9964%" y="213" width="0.0302%" height="15" fill="rgb(216,164,2)" fg:x="861" fg:w="1"/><text x="26.2464%" y="223.50"></text></g><g><title>d21-846826bfeb2f96d8`__rdl_alloc (2 samples, 0.06%)</title><rect x="26.0266%" y="213" width="0.0604%" height="15" fill="rgb(220,129,5)" fg:x="862" fg:w="2"/><text x="26.2766%" y="223.50"></text></g><g><title>d21-846826bfeb2f96d8`__rdl_dealloc (2 samples, 0.06%)</title><rect x="26.0870%" y="213" width="0.0604%" height="15" fill="rgb(242,17,10)" fg:x="864" fg:w="2"/><text x="26.3370%" y="223.50"></text></g><g><title>d21-846826bfeb2f96d8`core::hash::Hash::hash_slice (40 samples, 1.21%)</title><rect x="26.1473%" y="213" width="1.2077%" height="15" fill="rgb(242,107,0)" fg:x="866" fg:w="40"/><text x="26.3973%" y="223.50"></text></g><g><title>d21-846826bfeb2f96d8`&lt;alloc::string::String as core::clone::Clone&gt;::clone (50 samples, 1.51%)</title><rect x="35.2355%" y="197" width="1.5097%" height="15" fill="rgb(251,28,31)" fg:x="1167" fg:w="50"/><text x="35.4855%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (46 samples, 1.39%)</title><rect x="35.3563%" y="181" width="1.3889%" height="15" fill="rgb(233,223,10)" fg:x="1171" fg:w="46"/><text x="35.6063%" y="191.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$malloc (5 samples, 0.15%)</title><rect x="36.7452%" y="197" width="0.1510%" height="15" fill="rgb(215,21,27)" fg:x="1217" fg:w="5"/><text x="36.9952%" y="207.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$memcpy (2 samples, 0.06%)</title><rect x="36.8961%" y="197" width="0.0604%" height="15" fill="rgb(232,23,21)" fg:x="1222" fg:w="2"/><text x="37.1461%" y="207.50"></text></g><g><title>d21-846826bfeb2f96d8`__rdl_alloc (7 samples, 0.21%)</title><rect x="36.9565%" y="197" width="0.2114%" height="15" fill="rgb(244,5,23)" fg:x="1224" fg:w="7"/><text x="37.2065%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (36 samples, 1.09%)</title><rect x="37.1679%" y="197" width="1.0870%" height="15" fill="rgb(226,81,46)" fg:x="1231" fg:w="36"/><text x="37.4179%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (50 samples, 1.51%)</title><rect x="38.2548%" y="197" width="1.5097%" height="15" fill="rgb(247,70,30)" fg:x="1267" fg:w="50"/><text x="38.5048%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (9 samples, 0.27%)</title><rect x="39.7645%" y="197" width="0.2717%" height="15" fill="rgb(212,68,19)" fg:x="1317" fg:w="9"/><text x="40.0145%" y="207.50"></text></g><g><title>d21-846826bfeb2f96d8`d21::pad::KeyPad::gen_moves (428 samples, 12.92%)</title><rect x="27.3551%" y="213" width="12.9227%" height="15" fill="rgb(240,187,13)" fg:x="906" fg:w="428"/><text x="27.6051%" y="223.50">d21-846826bfeb2f96d..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (8 samples, 0.24%)</title><rect x="40.0362%" y="197" width="0.2415%" height="15" fill="rgb(223,113,26)" fg:x="1326" fg:w="8"/><text x="40.2862%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (12 samples, 0.36%)</title><rect x="40.2778%" y="213" width="0.3623%" height="15" fill="rgb(206,192,2)" fg:x="1334" fg:w="12"/><text x="40.5278%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.51%)</title><rect x="40.6401%" y="213" width="0.5133%" height="15" fill="rgb(241,108,4)" fg:x="1346" fg:w="17"/><text x="40.8901%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (66 samples, 1.99%)</title><rect x="41.1534%" y="213" width="1.9928%" height="15" fill="rgb(247,173,49)" fg:x="1363" fg:w="66"/><text x="41.4034%" y="223.50">l..</text></g><g><title>d21-846826bfeb2f96d8`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,335 samples, 40.31%)</title><rect x="5.4952%" y="229" width="40.3080%" height="15" fill="rgb(224,114,35)" fg:x="182" fg:w="1335"/><text x="5.7452%" y="239.50">d21-846826bfeb2f96d8`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (88 samples, 2.66%)</title><rect x="43.1461%" y="213" width="2.6570%" height="15" fill="rgb(245,159,27)" fg:x="1429" fg:w="88"/><text x="43.3961%" y="223.50">li..</text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$free (7 samples, 0.21%)</title><rect x="45.8031%" y="229" width="0.2114%" height="15" fill="rgb(245,172,44)" fg:x="1517" fg:w="7"/><text x="46.0531%" y="239.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$malloc (2 samples, 0.06%)</title><rect x="46.0145%" y="229" width="0.0604%" height="15" fill="rgb(236,23,11)" fg:x="1524" fg:w="2"/><text x="46.2645%" y="239.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$memcmp (41 samples, 1.24%)</title><rect x="46.0749%" y="229" width="1.2379%" height="15" fill="rgb(205,117,38)" fg:x="1526" fg:w="41"/><text x="46.3249%" y="239.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$pthread_mutex_lock (1 samples, 0.03%)</title><rect x="47.3128%" y="229" width="0.0302%" height="15" fill="rgb(237,72,25)" fg:x="1567" fg:w="1"/><text x="47.5628%" y="239.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$pthread_mutex_unlock (4 samples, 0.12%)</title><rect x="47.3430%" y="229" width="0.1208%" height="15" fill="rgb(244,70,9)" fg:x="1568" fg:w="4"/><text x="47.5930%" y="239.50"></text></g><g><title>d21-846826bfeb2f96d8`__rdl_alloc (5 samples, 0.15%)</title><rect x="47.4638%" y="229" width="0.1510%" height="15" fill="rgb(217,125,39)" fg:x="1572" fg:w="5"/><text x="47.7138%" y="239.50"></text></g><g><title>d21-846826bfeb2f96d8`__rdl_dealloc (4 samples, 0.12%)</title><rect x="47.6147%" y="229" width="0.1208%" height="15" fill="rgb(235,36,10)" fg:x="1577" fg:w="4"/><text x="47.8647%" y="239.50"></text></g><g><title>d21-846826bfeb2f96d8`core::hash::Hash::hash_slice (109 samples, 3.29%)</title><rect x="47.7355%" y="229" width="3.2911%" height="15" fill="rgb(251,123,47)" fg:x="1581" fg:w="109"/><text x="47.9855%" y="239.50">d21..</text></g><g><title>d21-846826bfeb2f96d8`&lt;alloc::string::String as core::clone::Clone&gt;::clone (83 samples, 2.51%)</title><rect x="71.3164%" y="213" width="2.5060%" height="15" fill="rgb(221,13,13)" fg:x="2362" fg:w="83"/><text x="71.5664%" y="223.50">d2..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (77 samples, 2.32%)</title><rect x="71.4976%" y="197" width="2.3249%" height="15" fill="rgb(238,131,9)" fg:x="2368" fg:w="77"/><text x="71.7476%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="73.7923%" y="181" width="0.0302%" height="15" fill="rgb(211,50,8)" fg:x="2444" fg:w="1"/><text x="74.0423%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="73.7923%" y="165" width="0.0302%" height="15" fill="rgb(245,182,24)" fg:x="2444" fg:w="1"/><text x="74.0423%" y="175.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$malloc (19 samples, 0.57%)</title><rect x="73.8225%" y="213" width="0.5737%" height="15" fill="rgb(242,14,37)" fg:x="2445" fg:w="19"/><text x="74.0725%" y="223.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$memcpy (8 samples, 0.24%)</title><rect x="74.3961%" y="213" width="0.2415%" height="15" fill="rgb(246,228,12)" fg:x="2464" fg:w="8"/><text x="74.6461%" y="223.50"></text></g><g><title>d21-846826bfeb2f96d8`__rdl_alloc (13 samples, 0.39%)</title><rect x="74.6377%" y="213" width="0.3925%" height="15" fill="rgb(213,55,15)" fg:x="2472" fg:w="13"/><text x="74.8877%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (83 samples, 2.51%)</title><rect x="75.0302%" y="213" width="2.5060%" height="15" fill="rgb(209,9,3)" fg:x="2485" fg:w="83"/><text x="75.2802%" y="223.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (131 samples, 3.96%)</title><rect x="77.5362%" y="213" width="3.9553%" height="15" fill="rgb(230,59,30)" fg:x="2568" fg:w="131"/><text x="77.7862%" y="223.50">libs..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (34 samples, 1.03%)</title><rect x="81.4915%" y="213" width="1.0266%" height="15" fill="rgb(209,121,21)" fg:x="2699" fg:w="34"/><text x="81.7415%" y="223.50"></text></g><g><title>d21-846826bfeb2f96d8`d21::pad::KeyPad::gen_moves (1,058 samples, 31.94%)</title><rect x="51.0266%" y="229" width="31.9444%" height="15" fill="rgb(220,109,13)" fg:x="1690" fg:w="1058"/><text x="51.2766%" y="239.50">d21-846826bfeb2f96d8`d21::pad::KeyPad::gen_moves</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (15 samples, 0.45%)</title><rect x="82.5181%" y="213" width="0.4529%" height="15" fill="rgb(232,18,1)" fg:x="2733" fg:w="15"/><text x="82.7681%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (29 samples, 0.88%)</title><rect x="82.9710%" y="229" width="0.8756%" height="15" fill="rgb(215,41,42)" fg:x="2748" fg:w="29"/><text x="83.2210%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (36 samples, 1.09%)</title><rect x="83.8466%" y="229" width="1.0870%" height="15" fill="rgb(224,123,36)" fg:x="2777" fg:w="36"/><text x="84.0966%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (139 samples, 4.20%)</title><rect x="84.9336%" y="229" width="4.1969%" height="15" fill="rgb(240,125,3)" fg:x="2813" fg:w="139"/><text x="85.1836%" y="239.50">libsy..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="89.1304%" y="229" width="0.0302%" height="15" fill="rgb(205,98,50)" fg:x="2952" fg:w="1"/><text x="89.3804%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (235 samples, 7.10%)</title><rect x="89.1606%" y="229" width="7.0954%" height="15" fill="rgb(205,185,37)" fg:x="2953" fg:w="235"/><text x="89.4106%" y="239.50">libsystem_..</text></g><g><title>d21-846826bfeb2f96d8`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,143 samples, 94.90%)</title><rect x="1.3889%" y="245" width="94.8973%" height="15" fill="rgb(238,207,15)" fg:x="46" fg:w="3143"/><text x="1.6389%" y="255.50">d21-846826bfeb2f96d8`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="96.2560%" y="229" width="0.0302%" height="15" fill="rgb(213,199,42)" fg:x="3188" fg:w="1"/><text x="96.5060%" y="239.50"></text></g><g><title>d21-846826bfeb2f96d8`DYLD-STUB$$free (26 samples, 0.79%)</title><rect x="96.2862%" y="245" width="0.7850%" height="15" fill="rgb(235,201,11)" fg:x="3189" fg:w="26"/><text x="96.5362%" y="255.50"></text></g><g><title>d21-846826bfeb2f96d8`d21::pad::KeyPad::gen_moves (9 samples, 0.27%)</title><rect x="97.0713%" y="245" width="0.2717%" height="15" fill="rgb(207,46,11)" fg:x="3215" fg:w="9"/><text x="97.3213%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (65 samples, 1.96%)</title><rect x="97.3430%" y="245" width="1.9626%" height="15" fill="rgb(241,35,35)" fg:x="3224" fg:w="65"/><text x="97.5930%" y="255.50">l..</text></g><g><title>all (3,312 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(243,32,47)" fg:x="0" fg:w="3312"/><text x="0.2500%" y="431.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (3,311 samples, 99.97%)</title><rect x="0.0302%" y="405" width="99.9698%" height="15" fill="rgb(247,202,23)" fg:x="1" fg:w="3311"/><text x="0.2802%" y="415.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (3,311 samples, 99.97%)</title><rect x="0.0302%" y="389" width="99.9698%" height="15" fill="rgb(219,102,11)" fg:x="1" fg:w="3311"/><text x="0.2802%" y="399.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>d21-846826bfeb2f96d8`std::sys::pal::unix::thread::Thread::new::thread_start (3,311 samples, 99.97%)</title><rect x="0.0302%" y="373" width="99.9698%" height="15" fill="rgb(243,110,44)" fg:x="1" fg:w="3311"/><text x="0.2802%" y="383.50">d21-846826bfeb2f96d8`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>d21-846826bfeb2f96d8`core::ops::function::FnOnce::call_once{{vtable.shim}} (3,311 samples, 99.97%)</title><rect x="0.0302%" y="357" width="99.9698%" height="15" fill="rgb(222,74,54)" fg:x="1" fg:w="3311"/><text x="0.2802%" y="367.50">d21-846826bfeb2f96d8`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>d21-846826bfeb2f96d8`std::sys::backtrace::__rust_begin_short_backtrace (3,311 samples, 99.97%)</title><rect x="0.0302%" y="341" width="99.9698%" height="15" fill="rgb(216,99,12)" fg:x="1" fg:w="3311"/><text x="0.2802%" y="351.50">d21-846826bfeb2f96d8`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>d21-846826bfeb2f96d8`test::run_test::_{{closure}} (3,311 samples, 99.97%)</title><rect x="0.0302%" y="325" width="99.9698%" height="15" fill="rgb(226,22,26)" fg:x="1" fg:w="3311"/><text x="0.2802%" y="335.50">d21-846826bfeb2f96d8`test::run_test::_{{closure}}</text></g><g><title>d21-846826bfeb2f96d8`test::__rust_begin_short_backtrace (3,311 samples, 99.97%)</title><rect x="0.0302%" y="309" width="99.9698%" height="15" fill="rgb(217,163,10)" fg:x="1" fg:w="3311"/><text x="0.2802%" y="319.50">d21-846826bfeb2f96d8`test::__rust_begin_short_backtrace</text></g><g><title>d21-846826bfeb2f96d8`core::ops::function::FnOnce::call_once (3,311 samples, 99.97%)</title><rect x="0.0302%" y="293" width="99.9698%" height="15" fill="rgb(213,25,53)" fg:x="1" fg:w="3311"/><text x="0.2802%" y="303.50">d21-846826bfeb2f96d8`core::ops::function::FnOnce::call_once</text></g><g><title>d21-846826bfeb2f96d8`d21::tests::test1 (3,311 samples, 99.97%)</title><rect x="0.0302%" y="277" width="99.9698%" height="15" fill="rgb(252,105,26)" fg:x="1" fg:w="3311"/><text x="0.2802%" y="287.50">d21-846826bfeb2f96d8`d21::tests::test1</text></g><g><title>d21-846826bfeb2f96d8`d21::task2 (3,295 samples, 99.49%)</title><rect x="0.5133%" y="261" width="99.4867%" height="15" fill="rgb(220,39,43)" fg:x="17" fg:w="3295"/><text x="0.7633%" y="271.50">d21-846826bfeb2f96d8`d21::task2</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (23 samples, 0.69%)</title><rect x="99.3056%" y="245" width="0.6944%" height="15" fill="rgb(229,68,48)" fg:x="3289" fg:w="23"/><text x="99.5556%" y="255.50"></text></g></svg></svg>