<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="316377"><g><title>d21-bf5889d1e15c058c`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (82 samples, 0.03%)</title><rect x="4.0281%" y="133" width="0.0259%" height="15" fill="rgb(227,0,7)" fg:x="12744" fg:w="82"/><text x="4.2781%" y="143.50"></text></g><g><title>d21-bf5889d1e15c058c`&lt;alloc::string::String as core::clone::Clone&gt;::clone (4,302 samples, 1.36%)</title><rect x="4.0964%" y="117" width="1.3598%" height="15" fill="rgb(217,0,24)" fg:x="12960" fg:w="4302"/><text x="4.3464%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (64 samples, 0.02%)</title><rect x="12.7756%" y="85" width="0.0202%" height="15" fill="rgb(221,193,54)" fg:x="40419" fg:w="64"/><text x="13.0256%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (42 samples, 0.01%)</title><rect x="27.0440%" y="53" width="0.0133%" height="15" fill="rgb(248,212,6)" fg:x="85561" fg:w="42"/><text x="27.2940%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (14,897 samples, 4.71%)</title><rect x="24.1437%" y="69" width="4.7086%" height="15" fill="rgb(208,68,35)" fg:x="76385" fg:w="14897"/><text x="24.3937%" y="79.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (5,679 samples, 1.80%)</title><rect x="27.0573%" y="53" width="1.7950%" height="15" fill="rgb(232,128,0)" fg:x="85603" fg:w="5679"/><text x="27.3073%" y="63.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (76 samples, 0.02%)</title><rect x="28.8283%" y="37" width="0.0240%" height="15" fill="rgb(207,160,47)" fg:x="91206" fg:w="76"/><text x="29.0783%" y="47.50"></text></g><g><title>d21-bf5889d1e15c058c`&lt;alloc::string::String as core::clone::Clone&gt;::clone (56,249 samples, 17.78%)</title><rect x="11.0830%" y="101" width="17.7791%" height="15" fill="rgb(228,23,34)" fg:x="35064" fg:w="56249"/><text x="11.3330%" y="111.50">d21-bf5889d1e15c058c`&lt;alloc:..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (50,830 samples, 16.07%)</title><rect x="12.7958%" y="85" width="16.0663%" height="15" fill="rgb(218,30,26)" fg:x="40483" fg:w="50830"/><text x="13.0458%" y="95.50">libsystem_malloc.dylib`na..</text></g><g><title>d21-bf5889d1e15c058c`DYLD-STUB$$malloc (3,194 samples, 1.01%)</title><rect x="28.8621%" y="101" width="1.0096%" height="15" fill="rgb(220,122,19)" fg:x="91313" fg:w="3194"/><text x="29.1121%" y="111.50"></text></g><g><title>d21-bf5889d1e15c058c`DYLD-STUB$$memcpy (3,584 samples, 1.13%)</title><rect x="29.8716%" y="101" width="1.1328%" height="15" fill="rgb(250,228,42)" fg:x="94507" fg:w="3584"/><text x="30.1216%" y="111.50"></text></g><g><title>d21-bf5889d1e15c058c`__rdl_alloc (6,618 samples, 2.09%)</title><rect x="31.0045%" y="101" width="2.0918%" height="15" fill="rgb(240,193,28)" fg:x="98091" fg:w="6618"/><text x="31.2545%" y="111.50">d..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24,452 samples, 7.73%)</title><rect x="33.0963%" y="101" width="7.7288%" height="15" fill="rgb(216,20,37)" fg:x="104709" fg:w="24452"/><text x="33.3463%" y="111.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (39 samples, 0.01%)</title><rect x="40.8257%" y="101" width="0.0123%" height="15" fill="rgb(206,188,39)" fg:x="129163" fg:w="39"/><text x="41.0757%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (75 samples, 0.02%)</title><rect x="40.8380%" y="101" width="0.0237%" height="15" fill="rgb(217,207,13)" fg:x="129202" fg:w="75"/><text x="41.0880%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (106 samples, 0.03%)</title><rect x="40.8946%" y="85" width="0.0335%" height="15" fill="rgb(231,73,38)" fg:x="129381" fg:w="106"/><text x="41.1446%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (66 samples, 0.02%)</title><rect x="40.9281%" y="85" width="0.0209%" height="15" fill="rgb(225,20,46)" fg:x="129487" fg:w="66"/><text x="41.1781%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages_plat (71 samples, 0.02%)</title><rect x="41.0188%" y="69" width="0.0224%" height="15" fill="rgb(210,31,41)" fg:x="129774" fg:w="71"/><text x="41.2688%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (69 samples, 0.02%)</title><rect x="41.0194%" y="53" width="0.0218%" height="15" fill="rgb(221,200,47)" fg:x="129776" fg:w="69"/><text x="41.2694%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (630 samples, 0.20%)</title><rect x="41.1781%" y="53" width="0.1991%" height="15" fill="rgb(226,26,5)" fg:x="130278" fg:w="630"/><text x="41.4281%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,649 samples, 0.52%)</title><rect x="40.8617%" y="101" width="0.5212%" height="15" fill="rgb(249,33,26)" fg:x="129277" fg:w="1649"/><text x="41.1117%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1,373 samples, 0.43%)</title><rect x="40.9489%" y="85" width="0.4340%" height="15" fill="rgb(235,183,28)" fg:x="129553" fg:w="1373"/><text x="41.1989%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1,073 samples, 0.34%)</title><rect x="41.0438%" y="69" width="0.3392%" height="15" fill="rgb(221,5,38)" fg:x="129853" fg:w="1073"/><text x="41.2938%" y="79.50"></text></g><g><title>d21-bf5889d1e15c058c`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (139,031 samples, 43.94%)</title><rect x="5.4561%" y="117" width="43.9447%" height="15" fill="rgb(247,18,42)" fg:x="17262" fg:w="139031"/><text x="5.7061%" y="127.50">d21-bf5889d1e15c058c`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone</text></g><g><title>libsystem_platform.dylib`_platform_memmove (25,367 samples, 8.02%)</title><rect x="41.3829%" y="101" width="8.0180%" height="15" fill="rgb(241,131,45)" fg:x="130926" fg:w="25367"/><text x="41.6329%" y="111.50">libsystem_p..</text></g><g><title>d21-bf5889d1e15c058c`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::clone::Clone&gt;::clone (379 samples, 0.12%)</title><rect x="49.4009%" y="117" width="0.1198%" height="15" fill="rgb(249,31,29)" fg:x="156293" fg:w="379"/><text x="49.6509%" y="127.50"></text></g><g><title>d21-bf5889d1e15c058c`&lt;alloc::string::String as core::clone::Clone&gt;::clone (574 samples, 0.18%)</title><rect x="50.5340%" y="101" width="0.1814%" height="15" fill="rgb(225,111,53)" fg:x="159878" fg:w="574"/><text x="50.7840%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (805 samples, 0.25%)</title><rect x="53.3955%" y="53" width="0.2544%" height="15" fill="rgb(238,160,17)" fg:x="168931" fg:w="805"/><text x="53.6455%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (635 samples, 0.20%)</title><rect x="53.4492%" y="37" width="0.2007%" height="15" fill="rgb(214,148,48)" fg:x="169101" fg:w="635"/><text x="53.6992%" y="47.50"></text></g><g><title>d21-bf5889d1e15c058c`&lt;alloc::string::String as core::clone::Clone&gt;::clone (6,809 samples, 2.15%)</title><rect x="51.4993%" y="85" width="2.1522%" height="15" fill="rgb(232,36,49)" fg:x="162932" fg:w="6809"/><text x="51.7493%" y="95.50">d..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (5,512 samples, 1.74%)</title><rect x="51.9093%" y="69" width="1.7422%" height="15" fill="rgb(209,103,24)" fg:x="164229" fg:w="5512"/><text x="52.1593%" y="79.50"></text></g><g><title>d21-bf5889d1e15c058c`DYLD-STUB$$malloc (460 samples, 0.15%)</title><rect x="53.6515%" y="85" width="0.1454%" height="15" fill="rgb(229,88,8)" fg:x="169741" fg:w="460"/><text x="53.9015%" y="95.50"></text></g><g><title>d21-bf5889d1e15c058c`DYLD-STUB$$memcpy (510 samples, 0.16%)</title><rect x="53.7969%" y="85" width="0.1612%" height="15" fill="rgb(213,181,19)" fg:x="170201" fg:w="510"/><text x="54.0469%" y="95.50"></text></g><g><title>d21-bf5889d1e15c058c`__rdl_alloc (507 samples, 0.16%)</title><rect x="53.9581%" y="85" width="0.1603%" height="15" fill="rgb(254,191,54)" fg:x="170711" fg:w="507"/><text x="54.2081%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,916 samples, 0.92%)</title><rect x="54.1183%" y="85" width="0.9217%" height="15" fill="rgb(241,83,37)" fg:x="171218" fg:w="2916"/><text x="54.3683%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (4,419 samples, 1.40%)</title><rect x="55.0400%" y="85" width="1.3968%" height="15" fill="rgb(233,36,39)" fg:x="174134" fg:w="4419"/><text x="55.2900%" y="95.50"></text></g><g><title>d21-bf5889d1e15c058c`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::clone::Clone&gt;::clone (21,574 samples, 6.82%)</title><rect x="50.7154%" y="101" width="6.8191%" height="15" fill="rgb(226,3,54)" fg:x="160452" fg:w="21574"/><text x="50.9654%" y="111.50">d21-bf588..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3,473 samples, 1.10%)</title><rect x="56.4368%" y="85" width="1.0977%" height="15" fill="rgb(245,192,40)" fg:x="178553" fg:w="3473"/><text x="56.6868%" y="95.50"></text></g><g><title>d21-bf5889d1e15c058c`DYLD-STUB$$malloc (195 samples, 0.06%)</title><rect x="57.5345%" y="101" width="0.0616%" height="15" fill="rgb(238,167,29)" fg:x="182026" fg:w="195"/><text x="57.7845%" y="111.50"></text></g><g><title>d21-bf5889d1e15c058c`__rdl_alloc (824 samples, 0.26%)</title><rect x="57.5962%" y="101" width="0.2604%" height="15" fill="rgb(232,182,51)" fg:x="182221" fg:w="824"/><text x="57.8462%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (282 samples, 0.09%)</title><rect x="57.8629%" y="101" width="0.0891%" height="15" fill="rgb(231,60,39)" fg:x="183065" fg:w="282"/><text x="58.1129%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3,171 samples, 1.00%)</title><rect x="57.9521%" y="101" width="1.0023%" height="15" fill="rgb(208,69,12)" fg:x="183347" fg:w="3171"/><text x="58.2021%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (13,576 samples, 4.29%)</title><rect x="58.9543%" y="101" width="4.2911%" height="15" fill="rgb(235,93,37)" fg:x="186518" fg:w="13576"/><text x="59.2043%" y="111.50">libsy..</text></g><g><title>libsystem_platform.dylib`__bzero (175 samples, 0.06%)</title><rect x="63.2476%" y="101" width="0.0553%" height="15" fill="rgb(213,116,39)" fg:x="200101" fg:w="175"/><text x="63.4976%" y="111.50"></text></g><g><title>d21-bf5889d1e15c058c`&lt;itertools::adaptors::multi_product::MultiProduct&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (45,070 samples, 14.25%)</title><rect x="49.5279%" y="117" width="14.2457%" height="15" fill="rgb(222,207,29)" fg:x="156695" fg:w="45070"/><text x="49.7779%" y="127.50">d21-bf5889d1e15c058c`&lt;..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1,489 samples, 0.47%)</title><rect x="63.3030%" y="101" width="0.4706%" height="15" fill="rgb(206,96,30)" fg:x="200276" fg:w="1489"/><text x="63.5530%" y="111.50"></text></g><g><title>d21-bf5889d1e15c058c`DYLD-STUB$$free (1,920 samples, 0.61%)</title><rect x="63.7739%" y="117" width="0.6069%" height="15" fill="rgb(218,138,4)" fg:x="201766" fg:w="1920"/><text x="64.0239%" y="127.50"></text></g><g><title>d21-bf5889d1e15c058c`__rdl_alloc (50 samples, 0.02%)</title><rect x="64.3814%" y="117" width="0.0158%" height="15" fill="rgb(250,191,14)" fg:x="203688" fg:w="50"/><text x="64.6314%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_free (5,669 samples, 1.79%)</title><rect x="64.3979%" y="117" width="1.7918%" height="15" fill="rgb(239,60,40)" fg:x="203740" fg:w="5669"/><text x="64.6479%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (186 samples, 0.06%)</title><rect x="66.1897%" y="117" width="0.0588%" height="15" fill="rgb(206,27,48)" fg:x="209409" fg:w="186"/><text x="66.4397%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2,510 samples, 0.79%)</title><rect x="66.2485%" y="117" width="0.7934%" height="15" fill="rgb(225,35,8)" fg:x="209595" fg:w="2510"/><text x="66.4985%" y="127.50"></text></g><g><title>d21-bf5889d1e15c058c`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (199,340 samples, 63.01%)</title><rect x="4.0540%" y="133" width="63.0071%" height="15" fill="rgb(250,213,24)" fg:x="12826" fg:w="199340"/><text x="4.3040%" y="143.50">d21-bf5889d1e15c058c`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>d21-bf5889d1e15c058c`&lt;itertools::adaptors::multi_product::MultiProduct&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.01%)</title><rect x="67.0618%" y="133" width="0.0145%" height="15" fill="rgb(247,123,22)" fg:x="212168" fg:w="46"/><text x="67.3118%" y="143.50"></text></g><g><title>d21-bf5889d1e15c058c`&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (45 samples, 0.01%)</title><rect x="67.1044%" y="117" width="0.0142%" height="15" fill="rgb(231,138,38)" fg:x="212303" fg:w="45"/><text x="67.3544%" y="127.50"></text></g><g><title>d21-bf5889d1e15c058c`std::sys::pal::unix::time::Timespec::sub_timespec (32 samples, 0.01%)</title><rect x="67.1085%" y="101" width="0.0101%" height="15" fill="rgb(231,145,46)" fg:x="212316" fg:w="32"/><text x="67.3585%" y="111.50"></text></g><g><title>d21-bf5889d1e15c058c`DYLD-STUB$$clock_gettime (81 samples, 0.03%)</title><rect x="67.1187%" y="117" width="0.0256%" height="15" fill="rgb(251,118,11)" fg:x="212348" fg:w="81"/><text x="67.3687%" y="127.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (148 samples, 0.05%)</title><rect x="67.2008%" y="85" width="0.0468%" height="15" fill="rgb(217,147,25)" fg:x="212608" fg:w="148"/><text x="67.4508%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (49 samples, 0.02%)</title><rect x="67.2321%" y="69" width="0.0155%" height="15" fill="rgb(247,81,37)" fg:x="212707" fg:w="49"/><text x="67.4821%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (3,495 samples, 1.10%)</title><rect x="67.2476%" y="85" width="1.1047%" height="15" fill="rgb(209,12,38)" fg:x="212756" fg:w="3495"/><text x="67.4976%" y="95.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (3,805 samples, 1.20%)</title><rect x="67.1566%" y="101" width="1.2027%" height="15" fill="rgb(227,1,9)" fg:x="212468" fg:w="3805"/><text x="67.4066%" y="111.50"></text></g><g><title>d21-bf5889d1e15c058c`std::sys::pal::unix::time::Timespec::now (3,862 samples, 1.22%)</title><rect x="67.1443%" y="117" width="1.2207%" height="15" fill="rgb(248,47,43)" fg:x="212429" fg:w="3862"/><text x="67.3943%" y="127.50"></text></g><g><title>d21-bf5889d1e15c058c`std::sys::pal::unix::time::Timespec::sub_timespec (556 samples, 0.18%)</title><rect x="68.3650%" y="117" width="0.1757%" height="15" fill="rgb(221,10,30)" fg:x="216291" fg:w="556"/><text x="68.6150%" y="127.50"></text></g><g><title>d21-bf5889d1e15c058c`indicatif::progress_bar::ProgressBar::inc (4,666 samples, 1.47%)</title><rect x="67.0763%" y="133" width="1.4748%" height="15" fill="rgb(210,229,1)" fg:x="212214" fg:w="4666"/><text x="67.3263%" y="143.50"></text></g><g><title>libsystem_c.dylib`isatty (48 samples, 0.02%)</title><rect x="68.5606%" y="53" width="0.0152%" height="15" fill="rgb(222,148,37)" fg:x="216910" fg:w="48"/><text x="68.8106%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (48 samples, 0.02%)</title><rect x="68.5606%" y="37" width="0.0152%" height="15" fill="rgb(234,67,33)" fg:x="216910" fg:w="48"/><text x="68.8106%" y="47.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (35 samples, 0.01%)</title><rect x="68.5758%" y="53" width="0.0111%" height="15" fill="rgb(247,98,35)" fg:x="216958" fg:w="35"/><text x="68.8258%" y="63.50"></text></g><g><title>d21-bf5889d1e15c058c`indicatif::draw_target::ProgressDrawTarget::width (85 samples, 0.03%)</title><rect x="68.5603%" y="85" width="0.0269%" height="15" fill="rgb(247,138,52)" fg:x="216909" fg:w="85"/><text x="68.8103%" y="95.50"></text></g><g><title>d21-bf5889d1e15c058c`console::unix_term::terminal_size (85 samples, 0.03%)</title><rect x="68.5603%" y="69" width="0.0269%" height="15" fill="rgb(213,79,30)" fg:x="216909" fg:w="85"/><text x="68.8103%" y="79.50"></text></g><g><title>d21-bf5889d1e15c058c`indicatif::state::BarState::draw (114 samples, 0.04%)</title><rect x="68.5524%" y="101" width="0.0360%" height="15" fill="rgb(246,177,23)" fg:x="216884" fg:w="114"/><text x="68.8024%" y="111.50"></text></g><g><title>d21-bf5889d1e15c058c`indicatif::progress_bar::ProgressBar::tick_inner (122 samples, 0.04%)</title><rect x="68.5511%" y="133" width="0.0386%" height="15" fill="rgb(230,62,27)" fg:x="216880" fg:w="122"/><text x="68.8011%" y="143.50"></text></g><g><title>d21-bf5889d1e15c058c`indicatif::state::BarState::update_estimate_and_draw (120 samples, 0.04%)</title><rect x="68.5518%" y="117" width="0.0379%" height="15" fill="rgb(216,154,8)" fg:x="216882" fg:w="120"/><text x="68.8018%" y="127.50"></text></g><g><title>d21-bf5889d1e15c058c`&lt;indicatif::iter::ProgressBarIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (204,409 samples, 64.61%)</title><rect x="3.9870%" y="149" width="64.6093%" height="15" fill="rgb(244,35,45)" fg:x="12614" fg:w="204409"/><text x="4.2370%" y="159.50">d21-bf5889d1e15c058c`&lt;indicatif::iter::ProgressBarIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>d21-bf5889d1e15c058c`__rdl_dealloc (32 samples, 0.01%)</title><rect x="68.5963%" y="149" width="0.0101%" height="15" fill="rgb(251,115,12)" fg:x="217023" fg:w="32"/><text x="68.8463%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (51,239 samples, 16.20%)</title><rect x="68.6083%" y="149" width="16.1956%" height="15" fill="rgb(240,54,50)" fg:x="217061" fg:w="51239"/><text x="68.8583%" y="159.50">libsystem_malloc.dylib`_n..</text></g><g><title>libsystem_malloc.dylib`_szone_free (254 samples, 0.08%)</title><rect x="84.8039%" y="149" width="0.0803%" height="15" fill="rgb(233,84,52)" fg:x="268300" fg:w="254"/><text x="85.0539%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (325 samples, 0.10%)</title><rect x="85.0605%" y="133" width="0.1027%" height="15" fill="rgb(207,117,47)" fg:x="269112" fg:w="325"/><text x="85.3105%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (144 samples, 0.05%)</title><rect x="85.1633%" y="133" width="0.0455%" height="15" fill="rgb(249,43,39)" fg:x="269437" fg:w="144"/><text x="85.4133%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (86 samples, 0.03%)</title><rect x="85.2088%" y="133" width="0.0272%" height="15" fill="rgb(209,38,44)" fg:x="269581" fg:w="86"/><text x="85.4588%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (402 samples, 0.13%)</title><rect x="85.2360%" y="133" width="0.1271%" height="15" fill="rgb(236,212,23)" fg:x="269667" fg:w="402"/><text x="85.4860%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (3,381 samples, 1.07%)</title><rect x="85.3659%" y="133" width="1.0687%" height="15" fill="rgb(242,79,21)" fg:x="270078" fg:w="3381"/><text x="85.6159%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3,376 samples, 1.07%)</title><rect x="85.3675%" y="117" width="1.0671%" height="15" fill="rgb(211,96,35)" fg:x="270083" fg:w="3376"/><text x="85.6175%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (362 samples, 0.11%)</title><rect x="86.4371%" y="117" width="0.1144%" height="15" fill="rgb(253,215,40)" fg:x="273467" fg:w="362"/><text x="86.6871%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (372 samples, 0.12%)</title><rect x="86.4349%" y="133" width="0.1176%" height="15" fill="rgb(211,81,21)" fg:x="273460" fg:w="372"/><text x="86.6849%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (5,279 samples, 1.67%)</title><rect x="84.8842%" y="149" width="1.6686%" height="15" fill="rgb(208,190,38)" fg:x="268554" fg:w="5279"/><text x="85.1342%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (1,667 samples, 0.53%)</title><rect x="86.5528%" y="149" width="0.5269%" height="15" fill="rgb(235,213,38)" fg:x="273833" fg:w="1667"/><text x="86.8028%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1,667 samples, 0.53%)</title><rect x="86.5528%" y="133" width="0.5269%" height="15" fill="rgb(237,122,38)" fg:x="273833" fg:w="1667"/><text x="86.8028%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9,890 samples, 3.13%)</title><rect x="87.0983%" y="117" width="3.1260%" height="15" fill="rgb(244,218,35)" fg:x="275559" fg:w="9890"/><text x="87.3483%" y="127.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (9,933 samples, 3.14%)</title><rect x="87.0917%" y="133" width="3.1396%" height="15" fill="rgb(240,68,47)" fg:x="275538" fg:w="9933"/><text x="87.3417%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (9,972 samples, 3.15%)</title><rect x="87.0797%" y="149" width="3.1519%" height="15" fill="rgb(210,16,53)" fg:x="275500" fg:w="9972"/><text x="87.3297%" y="159.50">lib..</text></g><g><title>d21-bf5889d1e15c058c`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (285,526 samples, 90.25%)</title><rect x="0.0003%" y="165" width="90.2487%" height="15" fill="rgb(235,124,12)" fg:x="1" fg:w="285526"/><text x="0.2503%" y="175.50">d21-bf5889d1e15c058c`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (54 samples, 0.02%)</title><rect x="90.2319%" y="149" width="0.0171%" height="15" fill="rgb(224,169,11)" fg:x="285473" fg:w="54"/><text x="90.4819%" y="159.50"></text></g><g><title>d21-bf5889d1e15c058c`&lt;indicatif::iter::ProgressBarIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 0.02%)</title><rect x="90.2490%" y="165" width="0.0234%" height="15" fill="rgb(250,166,2)" fg:x="285527" fg:w="74"/><text x="90.4990%" y="175.50"></text></g><g><title>d21-bf5889d1e15c058c`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (39 samples, 0.01%)</title><rect x="90.2600%" y="149" width="0.0123%" height="15" fill="rgb(242,216,29)" fg:x="285562" fg:w="39"/><text x="90.5100%" y="159.50"></text></g><g><title>d21-bf5889d1e15c058c`DYLD-STUB$$free (3,481 samples, 1.10%)</title><rect x="90.2724%" y="165" width="1.1003%" height="15" fill="rgb(230,116,27)" fg:x="285601" fg:w="3481"/><text x="90.5224%" y="175.50"></text></g><g><title>d21-bf5889d1e15c058c`__rdl_dealloc (33 samples, 0.01%)</title><rect x="91.3726%" y="165" width="0.0104%" height="15" fill="rgb(228,99,48)" fg:x="289082" fg:w="33"/><text x="91.6226%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (21,871 samples, 6.91%)</title><rect x="91.3837%" y="165" width="6.9130%" height="15" fill="rgb(253,11,6)" fg:x="289117" fg:w="21871"/><text x="91.6337%" y="175.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5,236 samples, 1.65%)</title><rect x="98.2967%" y="165" width="1.6550%" height="15" fill="rgb(247,143,39)" fg:x="310988" fg:w="5236"/><text x="98.5467%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (67 samples, 0.02%)</title><rect x="99.9516%" y="165" width="0.0212%" height="15" fill="rgb(236,97,10)" fg:x="316224" fg:w="67"/><text x="100.2016%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (58 samples, 0.02%)</title><rect x="99.9804%" y="165" width="0.0183%" height="15" fill="rgb(233,208,19)" fg:x="316315" fg:w="58"/><text x="100.2304%" y="175.50"></text></g><g><title>all (316,377 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(216,164,2)" fg:x="0" fg:w="316377"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (316,376 samples, 100.00%)</title><rect x="0.0003%" y="341" width="99.9997%" height="15" fill="rgb(220,129,5)" fg:x="1" fg:w="316376"/><text x="0.2503%" y="351.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (316,376 samples, 100.00%)</title><rect x="0.0003%" y="325" width="99.9997%" height="15" fill="rgb(242,17,10)" fg:x="1" fg:w="316376"/><text x="0.2503%" y="335.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>d21-bf5889d1e15c058c`std::sys::pal::unix::thread::Thread::new::thread_start (316,376 samples, 100.00%)</title><rect x="0.0003%" y="309" width="99.9997%" height="15" fill="rgb(242,107,0)" fg:x="1" fg:w="316376"/><text x="0.2503%" y="319.50">d21-bf5889d1e15c058c`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>d21-bf5889d1e15c058c`core::ops::function::FnOnce::call_once{{vtable.shim}} (316,376 samples, 100.00%)</title><rect x="0.0003%" y="293" width="99.9997%" height="15" fill="rgb(251,28,31)" fg:x="1" fg:w="316376"/><text x="0.2503%" y="303.50">d21-bf5889d1e15c058c`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>d21-bf5889d1e15c058c`std::sys::backtrace::__rust_begin_short_backtrace (316,376 samples, 100.00%)</title><rect x="0.0003%" y="277" width="99.9997%" height="15" fill="rgb(233,223,10)" fg:x="1" fg:w="316376"/><text x="0.2503%" y="287.50">d21-bf5889d1e15c058c`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>d21-bf5889d1e15c058c`test::run_test::_{{closure}} (316,376 samples, 100.00%)</title><rect x="0.0003%" y="261" width="99.9997%" height="15" fill="rgb(215,21,27)" fg:x="1" fg:w="316376"/><text x="0.2503%" y="271.50">d21-bf5889d1e15c058c`test::run_test::_{{closure}}</text></g><g><title>d21-bf5889d1e15c058c`test::__rust_begin_short_backtrace (316,376 samples, 100.00%)</title><rect x="0.0003%" y="245" width="99.9997%" height="15" fill="rgb(232,23,21)" fg:x="1" fg:w="316376"/><text x="0.2503%" y="255.50">d21-bf5889d1e15c058c`test::__rust_begin_short_backtrace</text></g><g><title>d21-bf5889d1e15c058c`core::ops::function::FnOnce::call_once (316,376 samples, 100.00%)</title><rect x="0.0003%" y="229" width="99.9997%" height="15" fill="rgb(244,5,23)" fg:x="1" fg:w="316376"/><text x="0.2503%" y="239.50">d21-bf5889d1e15c058c`core::ops::function::FnOnce::call_once</text></g><g><title>d21-bf5889d1e15c058c`d21::tests::test1 (316,376 samples, 100.00%)</title><rect x="0.0003%" y="213" width="99.9997%" height="15" fill="rgb(226,81,46)" fg:x="1" fg:w="316376"/><text x="0.2503%" y="223.50">d21-bf5889d1e15c058c`d21::tests::test1</text></g><g><title>d21-bf5889d1e15c058c`d21::task2 (316,376 samples, 100.00%)</title><rect x="0.0003%" y="197" width="99.9997%" height="15" fill="rgb(247,70,30)" fg:x="1" fg:w="316376"/><text x="0.2503%" y="207.50">d21-bf5889d1e15c058c`d21::task2</text></g><g><title>d21-bf5889d1e15c058c`d21::pad::KeyPad::gen_shortest_iter (316,376 samples, 100.00%)</title><rect x="0.0003%" y="181" width="99.9997%" height="15" fill="rgb(212,68,19)" fg:x="1" fg:w="316376"/><text x="0.2503%" y="191.50">d21-bf5889d1e15c058c`d21::pad::KeyPad::gen_shortest_iter</text></g></svg></svg>